/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Amazon.Advertising.SponsoredProducts.Client;
using Amazon.Advertising.SponsoredProducts.Model;

namespace Amazon.Advertising.SponsoredProducts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INegativeTargetingClausesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent CreateSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> CreateSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent DeleteSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent ListSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> ListSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent UpdateSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INegativeTargetingClausesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        System.Threading.Tasks.Task<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> CreateSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent>> CreateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        System.Threading.Tasks.Task<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> DeleteSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent>> DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        System.Threading.Tasks.Task<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> ListSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent>> ListSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        System.Threading.Tasks.Task<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> UpdateSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </remarks>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent>> UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INegativeTargetingClausesApi : INegativeTargetingClausesApiSync, INegativeTargetingClausesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NegativeTargetingClausesApi : INegativeTargetingClausesApi
    {
        private Amazon.Advertising.SponsoredProducts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NegativeTargetingClausesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NegativeTargetingClausesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NegativeTargetingClausesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NegativeTargetingClausesApi(string basePath)
        {
            this.Configuration = Amazon.Advertising.SponsoredProducts.Client.Configuration.MergeConfigurations(
                Amazon.Advertising.SponsoredProducts.Client.GlobalConfiguration.Instance,
                new Amazon.Advertising.SponsoredProducts.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Amazon.Advertising.SponsoredProducts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Amazon.Advertising.SponsoredProducts.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Amazon.Advertising.SponsoredProducts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NegativeTargetingClausesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NegativeTargetingClausesApi(Amazon.Advertising.SponsoredProducts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Amazon.Advertising.SponsoredProducts.Client.Configuration.MergeConfigurations(
                Amazon.Advertising.SponsoredProducts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Amazon.Advertising.SponsoredProducts.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Amazon.Advertising.SponsoredProducts.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Amazon.Advertising.SponsoredProducts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NegativeTargetingClausesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NegativeTargetingClausesApi(Amazon.Advertising.SponsoredProducts.Client.ISynchronousClient client, Amazon.Advertising.SponsoredProducts.Client.IAsynchronousClient asyncClient, Amazon.Advertising.SponsoredProducts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Amazon.Advertising.SponsoredProducts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Amazon.Advertising.SponsoredProducts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Amazon.Advertising.SponsoredProducts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Amazon.Advertising.SponsoredProducts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Amazon.Advertising.SponsoredProducts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent CreateSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0)
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = CreateSponsoredProductsNegativeTargetingClausesWithHttpInfo(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, prefer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> CreateSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }

            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            if (prefer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Prefer", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(prefer)); // header parameter
            }
            localVarRequestOptions.Data = sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.CreateSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public async System.Threading.Tasks.Task<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> CreateSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = await CreateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, prefer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        public async System.Threading.Tasks.Task<Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent>> CreateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->CreateSponsoredProductsNegativeTargetingClauses");
            }


            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            if (prefer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Prefer", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(prefer)); // header parameter
            }
            localVarRequestOptions.Data = sponsoredProductsCreateSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.CreateSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SponsoredProductsCreateSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent DeleteSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0)
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfo(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0)
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }

            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            localVarRequestOptions.Data = sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.DeleteSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public async System.Threading.Tasks.Task<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> DeleteSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = await DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        public async System.Threading.Tasks.Task<Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent>> DeleteSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->DeleteSponsoredProductsNegativeTargetingClauses");
            }


            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            localVarRequestOptions.Data = sponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.DeleteSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SponsoredProductsDeleteSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent ListSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0)
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = ListSponsoredProductsNegativeTargetingClausesWithHttpInfo(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> ListSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0)
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->ListSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->ListSponsoredProductsNegativeTargetingClauses");
            }

            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json",
                "application/json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            localVarRequestOptions.Data = sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.ListSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public async System.Threading.Tasks.Task<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> ListSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = await ListSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;,\&quot;advertiser_campaign_view\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        public async System.Threading.Tasks.Task<Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent>> ListSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent? sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent = default(SponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->ListSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->ListSponsoredProductsNegativeTargetingClauses");
            }


            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json",
                "application/json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            localVarRequestOptions.Data = sponsoredProductsListSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.ListSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SponsoredProductsListSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent UpdateSponsoredProductsNegativeTargetingClauses(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0)
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfo(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, prefer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfo(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }

            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            if (prefer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Prefer", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(prefer)); // header parameter
            }
            localVarRequestOptions.Data = sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.UpdateSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent</returns>
        public async System.Threading.Tasks.Task<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> UpdateSponsoredProductsNegativeTargetingClausesAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent> localVarResponse = await UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, prefer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///    **Requires one of these permissions**: [\&quot;advertiser_campaign_edit\&quot;]
        /// </summary>
        /// <exception cref="Amazon.Advertising.SponsoredProducts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAdvertisingAPIClientId">The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.</param>
        /// <param name="amazonAdvertisingAPIScope">The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.</param>
        /// <param name="sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent"></param>
        /// <param name="prefer">The \&quot;Prefer\&quot; header, as defined in [RFC7240], allows clients to request certain behavior from the service. The service ignores preference values that are either not supported or not known by the service. Either multiple Prefer headers are passed or single one with comma separated values, both forms are equivalent Supported preferences: return&#x3D;representation - return the full object when doing create/update/delete operations instead of ids (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent)</returns>
        public async System.Threading.Tasks.Task<Amazon.Advertising.SponsoredProducts.Client.ApiResponse<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent>> UpdateSponsoredProductsNegativeTargetingClausesWithHttpInfoAsync(string amazonAdvertisingAPIClientId, string amazonAdvertisingAPIScope, SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent, string? prefer = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonAdvertisingAPIClientId' is set
            if (amazonAdvertisingAPIClientId == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIClientId' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'amazonAdvertisingAPIScope' is set
            if (amazonAdvertisingAPIScope == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'amazonAdvertisingAPIScope' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }

            // verify the required parameter 'sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent' is set
            if (sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent == null)
            {
                throw new Amazon.Advertising.SponsoredProducts.Client.ApiException(400, "Missing required parameter 'sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent' when calling NegativeTargetingClausesApi->UpdateSponsoredProductsNegativeTargetingClauses");
            }


            Amazon.Advertising.SponsoredProducts.Client.RequestOptions localVarRequestOptions = new Amazon.Advertising.SponsoredProducts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.spNegativeTargetingClause.v3+json"
            };

            var localVarContentType = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Amazon.Advertising.SponsoredProducts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-ClientId", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIClientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Amazon-Advertising-API-Scope", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(amazonAdvertisingAPIScope)); // header parameter
            if (prefer != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Prefer", Amazon.Advertising.SponsoredProducts.Client.ClientUtils.ParameterToString(prefer)); // header parameter
            }
            localVarRequestOptions.Data = sponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesRequestContent;

            localVarRequestOptions.Operation = "NegativeTargetingClausesApi.UpdateSponsoredProductsNegativeTargetingClauses";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SponsoredProductsUpdateSponsoredProductsNegativeTargetingClausesResponseContent>("/sp/negativeTargets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSponsoredProductsNegativeTargetingClauses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
