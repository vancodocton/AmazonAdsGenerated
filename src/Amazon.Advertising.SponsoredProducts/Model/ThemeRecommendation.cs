/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Recommended asins grouped by theme attribute.
    /// </summary>
    [DataContract(Name = "ThemeRecommendation")]
    public partial class ThemeRecommendation : IEquatable<ThemeRecommendation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThemeRecommendation" /> class.
        /// </summary>
        /// <param name="description">A theme name representing the context around the recommended list of ASINs..</param>
        /// <param name="recommendedAsins">List of recommended ASINs under current theme..</param>
        /// <param name="theme">A theme name representing the context around the recommended list of ASINs..</param>
        public ThemeRecommendation(string description = default(string), List<string> recommendedAsins = default(List<string>), string theme = default(string))
        {
            this.Description = description;
            this.RecommendedAsins = recommendedAsins;
            this.Theme = theme;
        }

        /// <summary>
        /// A theme name representing the context around the recommended list of ASINs.
        /// </summary>
        /// <value>A theme name representing the context around the recommended list of ASINs.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// List of recommended ASINs under current theme.
        /// </summary>
        /// <value>List of recommended ASINs under current theme.</value>
        [DataMember(Name = "recommendedAsins", EmitDefaultValue = false)]
        public List<string> RecommendedAsins { get; set; }

        /// <summary>
        /// A theme name representing the context around the recommended list of ASINs.
        /// </summary>
        /// <value>A theme name representing the context around the recommended list of ASINs.</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThemeRecommendation {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RecommendedAsins: ").Append(RecommendedAsins).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThemeRecommendation);
        }

        /// <summary>
        /// Returns true if ThemeRecommendation instances are equal
        /// </summary>
        /// <param name="input">Instance of ThemeRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThemeRecommendation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RecommendedAsins == input.RecommendedAsins ||
                    this.RecommendedAsins != null &&
                    input.RecommendedAsins != null &&
                    this.RecommendedAsins.SequenceEqual(input.RecommendedAsins)
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.RecommendedAsins != null)
                {
                    hashCode = (hashCode * 59) + this.RecommendedAsins.GetHashCode();
                }
                if (this.Theme != null)
                {
                    hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
