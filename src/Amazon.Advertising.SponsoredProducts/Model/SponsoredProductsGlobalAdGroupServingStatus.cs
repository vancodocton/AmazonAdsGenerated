/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// SponsoredProductsGlobalAdGroupServingStatus
    /// </summary>
    [DataContract(Name = "SponsoredProductsGlobalAdGroupServingStatus")]
    public partial class SponsoredProductsGlobalAdGroupServingStatus : IEquatable<SponsoredProductsGlobalAdGroupServingStatus>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AdGroupServingStatus
        /// </summary>
        [DataMember(Name = "adGroupServingStatus", EmitDefaultValue = false)]
        public SponsoredProductsGlobalEntityServingStatus? AdGroupServingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SponsoredProductsGlobalAdGroupServingStatus" /> class.
        /// </summary>
        /// <param name="statusReasons">Serving status details of adgroup.</param>
        /// <param name="adGroupServingStatus">adGroupServingStatus.</param>
        /// <param name="marketplaceAdGroupServingStatus">The marketplace serving statuses..</param>
        public SponsoredProductsGlobalAdGroupServingStatus(List<SponsoredProductsGlobalAdGroupServingStatusReason> statusReasons = default(List<SponsoredProductsGlobalAdGroupServingStatusReason>), SponsoredProductsGlobalEntityServingStatus? adGroupServingStatus = default(SponsoredProductsGlobalEntityServingStatus?), List<SponsoredProductsMarketplaceAdGroupServingStatus> marketplaceAdGroupServingStatus = default(List<SponsoredProductsMarketplaceAdGroupServingStatus>))
        {
            this.StatusReasons = statusReasons;
            this.AdGroupServingStatus = adGroupServingStatus;
            this.MarketplaceAdGroupServingStatus = marketplaceAdGroupServingStatus;
        }

        /// <summary>
        /// Serving status details of adgroup
        /// </summary>
        /// <value>Serving status details of adgroup</value>
        [DataMember(Name = "statusReasons", EmitDefaultValue = false)]
        public List<SponsoredProductsGlobalAdGroupServingStatusReason> StatusReasons { get; set; }

        /// <summary>
        /// The marketplace serving statuses.
        /// </summary>
        /// <value>The marketplace serving statuses.</value>
        [DataMember(Name = "marketplaceAdGroupServingStatus", EmitDefaultValue = false)]
        public List<SponsoredProductsMarketplaceAdGroupServingStatus> MarketplaceAdGroupServingStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SponsoredProductsGlobalAdGroupServingStatus {\n");
            sb.Append("  StatusReasons: ").Append(StatusReasons).Append("\n");
            sb.Append("  AdGroupServingStatus: ").Append(AdGroupServingStatus).Append("\n");
            sb.Append("  MarketplaceAdGroupServingStatus: ").Append(MarketplaceAdGroupServingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SponsoredProductsGlobalAdGroupServingStatus);
        }

        /// <summary>
        /// Returns true if SponsoredProductsGlobalAdGroupServingStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of SponsoredProductsGlobalAdGroupServingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SponsoredProductsGlobalAdGroupServingStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.StatusReasons == input.StatusReasons ||
                    this.StatusReasons != null &&
                    input.StatusReasons != null &&
                    this.StatusReasons.SequenceEqual(input.StatusReasons)
                ) &&
                (
                    this.AdGroupServingStatus == input.AdGroupServingStatus ||
                    this.AdGroupServingStatus.Equals(input.AdGroupServingStatus)
                ) &&
                (
                    this.MarketplaceAdGroupServingStatus == input.MarketplaceAdGroupServingStatus ||
                    this.MarketplaceAdGroupServingStatus != null &&
                    input.MarketplaceAdGroupServingStatus != null &&
                    this.MarketplaceAdGroupServingStatus.SequenceEqual(input.MarketplaceAdGroupServingStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusReasons != null)
                {
                    hashCode = (hashCode * 59) + this.StatusReasons.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AdGroupServingStatus.GetHashCode();
                if (this.MarketplaceAdGroupServingStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceAdGroupServingStatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
