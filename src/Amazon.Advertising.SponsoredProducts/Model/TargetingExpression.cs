/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// The targeting expression. The &#x60;type&#x60; property specifies the targeting option. Use &#x60;CLOSE_MATCH&#x60; to match your auto targeting ads closely to the specified value. Use &#x60;LOOSE_MATCH&#x60; to match your auto targeting ads broadly to the specified value. Use &#x60;SUBSTITUTES&#x60; to display your auto targeting ads along with substitutable products. Use &#x60;COMPLEMENTS&#x60; to display your auto targeting ads along with affiliated products. Use &#x60;KEYWORD_BROAD_MATCH&#x60; to broadly match your keyword targeting ads with search queries. Use &#x60;KEYWORD_EXACT_MATCH&#x60; to exactly match your keyword targeting ads with search queries. Use &#x60;KEYWORD_PHRASE_MATCH&#x60; to match your keyword targeting ads with search phrases.
    /// </summary>
    [DataContract(Name = "TargetingExpression")]
    public partial class TargetingExpression : IEquatable<TargetingExpression>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CLOSEMATCH for value: CLOSE_MATCH
            /// </summary>
            [EnumMember(Value = "CLOSE_MATCH")]
            CLOSEMATCH = 1,

            /// <summary>
            /// Enum LOOSEMATCH for value: LOOSE_MATCH
            /// </summary>
            [EnumMember(Value = "LOOSE_MATCH")]
            LOOSEMATCH = 2,

            /// <summary>
            /// Enum SUBSTITUTES for value: SUBSTITUTES
            /// </summary>
            [EnumMember(Value = "SUBSTITUTES")]
            SUBSTITUTES = 3,

            /// <summary>
            /// Enum COMPLEMENTS for value: COMPLEMENTS
            /// </summary>
            [EnumMember(Value = "COMPLEMENTS")]
            COMPLEMENTS = 4,

            /// <summary>
            /// Enum KEYWORDBROADMATCH for value: KEYWORD_BROAD_MATCH
            /// </summary>
            [EnumMember(Value = "KEYWORD_BROAD_MATCH")]
            KEYWORDBROADMATCH = 5,

            /// <summary>
            /// Enum KEYWORDEXACTMATCH for value: KEYWORD_EXACT_MATCH
            /// </summary>
            [EnumMember(Value = "KEYWORD_EXACT_MATCH")]
            KEYWORDEXACTMATCH = 6,

            /// <summary>
            /// Enum KEYWORDPHRASEMATCH for value: KEYWORD_PHRASE_MATCH
            /// </summary>
            [EnumMember(Value = "KEYWORD_PHRASE_MATCH")]
            KEYWORDPHRASEMATCH = 7

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetingExpression" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetingExpression() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetingExpression" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="value">The targeting expression value..</param>
        public TargetingExpression(TypeEnum type = default(TypeEnum), string value = default(string))
        {
            this.Type = type;
            this.Value = value;
        }

        /// <summary>
        /// The targeting expression value.
        /// </summary>
        /// <value>The targeting expression value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TargetingExpression {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetingExpression);
        }

        /// <summary>
        /// Returns true if TargetingExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetingExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetingExpression input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
