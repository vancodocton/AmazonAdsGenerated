/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// InitialBudgetRecommendationRequest
    /// </summary>
    [DataContract(Name = "InitialBudgetRecommendationRequest")]
    public partial class InitialBudgetRecommendationRequest : IEquatable<InitialBudgetRecommendationRequest>, IValidatableObject
    {
        /// <summary>
        /// Specifies the targeting type.
        /// </summary>
        /// <value>Specifies the targeting type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetingTypeEnum
        {
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 1,

            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 2

        }


        /// <summary>
        /// Specifies the targeting type.
        /// </summary>
        /// <value>Specifies the targeting type.</value>
        [DataMember(Name = "targetingType", IsRequired = true, EmitDefaultValue = true)]
        public TargetingTypeEnum TargetingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitialBudgetRecommendationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InitialBudgetRecommendationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitialBudgetRecommendationRequest" /> class.
        /// </summary>
        /// <param name="bidding">bidding (required).</param>
        /// <param name="adGroups">The ad group information for this new campaign. (required).</param>
        /// <param name="endDate">The end date of the campaign in YYYYMMDD format..</param>
        /// <param name="targetingType">Specifies the targeting type. (required).</param>
        /// <param name="startDate">The start date of the campaign in YYYYMMDD format..</param>
        public InitialBudgetRecommendationRequest(Bidding bidding = default(Bidding), List<AdGroup> adGroups = default(List<AdGroup>), string endDate = default(string), TargetingTypeEnum targetingType = default(TargetingTypeEnum), string startDate = default(string))
        {
            // to ensure "bidding" is required (not null)
            if (bidding == null)
            {
                throw new ArgumentNullException("bidding is a required property for InitialBudgetRecommendationRequest and cannot be null");
            }
            this.Bidding = bidding;
            // to ensure "adGroups" is required (not null)
            if (adGroups == null)
            {
                throw new ArgumentNullException("adGroups is a required property for InitialBudgetRecommendationRequest and cannot be null");
            }
            this.AdGroups = adGroups;
            this.TargetingType = targetingType;
            this.EndDate = endDate;
            this.StartDate = startDate;
        }

        /// <summary>
        /// Gets or Sets Bidding
        /// </summary>
        [DataMember(Name = "bidding", IsRequired = true, EmitDefaultValue = true)]
        public Bidding Bidding { get; set; }

        /// <summary>
        /// The ad group information for this new campaign.
        /// </summary>
        /// <value>The ad group information for this new campaign.</value>
        [DataMember(Name = "adGroups", IsRequired = true, EmitDefaultValue = true)]
        public List<AdGroup> AdGroups { get; set; }

        /// <summary>
        /// The end date of the campaign in YYYYMMDD format.
        /// </summary>
        /// <value>The end date of the campaign in YYYYMMDD format.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The start date of the campaign in YYYYMMDD format.
        /// </summary>
        /// <value>The start date of the campaign in YYYYMMDD format.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitialBudgetRecommendationRequest {\n");
            sb.Append("  Bidding: ").Append(Bidding).Append("\n");
            sb.Append("  AdGroups: ").Append(AdGroups).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TargetingType: ").Append(TargetingType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitialBudgetRecommendationRequest);
        }

        /// <summary>
        /// Returns true if InitialBudgetRecommendationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InitialBudgetRecommendationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitialBudgetRecommendationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Bidding == input.Bidding ||
                    (this.Bidding != null &&
                    this.Bidding.Equals(input.Bidding))
                ) &&
                (
                    this.AdGroups == input.AdGroups ||
                    this.AdGroups != null &&
                    input.AdGroups != null &&
                    this.AdGroups.SequenceEqual(input.AdGroups)
                ) &&
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) &&
                (
                    this.TargetingType == input.TargetingType ||
                    this.TargetingType.Equals(input.TargetingType)
                ) &&
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bidding != null)
                {
                    hashCode = (hashCode * 59) + this.Bidding.GetHashCode();
                }
                if (this.AdGroups != null)
                {
                    hashCode = (hashCode * 59) + this.AdGroups.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetingType.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
