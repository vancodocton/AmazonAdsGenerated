/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Object representing date range type rule duration.
    /// </summary>
    [DataContract(Name = "DateRangeTypeRuleDuration")]
    public partial class DateRangeTypeRuleDuration : IEquatable<DateRangeTypeRuleDuration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRangeTypeRuleDuration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateRangeTypeRuleDuration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRangeTypeRuleDuration" /> class.
        /// </summary>
        /// <param name="endDate">The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than &#x60;startDate&#x60;..</param>
        /// <param name="startDate">The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date. (required).</param>
        public DateRangeTypeRuleDuration(string endDate = default(string), string startDate = default(string))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new ArgumentNullException("startDate is a required property for DateRangeTypeRuleDuration and cannot be null");
            }
            this.StartDate = startDate;
            this.EndDate = endDate;
        }

        /// <summary>
        /// The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than &#x60;startDate&#x60;.
        /// </summary>
        /// <value>The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than &#x60;startDate&#x60;.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
        /// </summary>
        /// <value>The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateRangeTypeRuleDuration {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateRangeTypeRuleDuration);
        }

        /// <summary>
        /// Returns true if DateRangeTypeRuleDuration instances are equal
        /// </summary>
        /// <param name="input">Instance of DateRangeTypeRuleDuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateRangeTypeRuleDuration input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) &&
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
