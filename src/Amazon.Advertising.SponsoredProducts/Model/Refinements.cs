/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Response object for the GetRefinementsForCategory API, containing information on Brand Nodes, Age Range Nodes, and Genre Nodes.
    /// </summary>
    [DataContract(Name = "Refinements")]
    public partial class Refinements : IEquatable<Refinements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Refinements" /> class.
        /// </summary>
        /// <param name="ageRanges">List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children&#39;s toys and games..</param>
        /// <param name="brands">List of Brands..</param>
        /// <param name="genres">List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books..</param>
        public Refinements(List<AgeRange> ageRanges = default(List<AgeRange>), List<Brand> brands = default(List<Brand>), List<Genre> genres = default(List<Genre>))
        {
            this.AgeRanges = ageRanges;
            this.Brands = brands;
            this.Genres = genres;
        }

        /// <summary>
        /// List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children&#39;s toys and games.
        /// </summary>
        /// <value>List of Age Ranges. Use the GetRefinementsForCategory to retrieve Age Ranges. Age Ranges are only available for categories related to children&#39;s toys and games.</value>
        [DataMember(Name = "ageRanges", EmitDefaultValue = false)]
        public List<AgeRange> AgeRanges { get; set; }

        /// <summary>
        /// List of Brands.
        /// </summary>
        /// <value>List of Brands.</value>
        [DataMember(Name = "brands", EmitDefaultValue = false)]
        public List<Brand> Brands { get; set; }

        /// <summary>
        /// List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.
        /// </summary>
        /// <value>List of Genres. Use the GetRefinementsForCategory to retrieve Genre Node IDs. Genres are only available for categories related to books.</value>
        [DataMember(Name = "genres", EmitDefaultValue = false)]
        public List<Genre> Genres { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Refinements {\n");
            sb.Append("  AgeRanges: ").Append(AgeRanges).Append("\n");
            sb.Append("  Brands: ").Append(Brands).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refinements);
        }

        /// <summary>
        /// Returns true if Refinements instances are equal
        /// </summary>
        /// <param name="input">Instance of Refinements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refinements input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.AgeRanges == input.AgeRanges ||
                    this.AgeRanges != null &&
                    input.AgeRanges != null &&
                    this.AgeRanges.SequenceEqual(input.AgeRanges)
                ) &&
                (
                    this.Brands == input.Brands ||
                    this.Brands != null &&
                    input.Brands != null &&
                    this.Brands.SequenceEqual(input.Brands)
                ) &&
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgeRanges != null)
                {
                    hashCode = (hashCode * 59) + this.AgeRanges.GetHashCode();
                }
                if (this.Brands != null)
                {
                    hashCode = (hashCode * 59) + this.Brands.GetHashCode();
                }
                if (this.Genres != null)
                {
                    hashCode = (hashCode * 59) + this.Genres.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
