/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// CampaignOptimizationRule
    /// </summary>
    [DataContract(Name = "CampaignOptimizationRule")]
    public partial class CampaignOptimizationRule : IEquatable<CampaignOptimizationRule>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [DataMember(Name = "recurrence", EmitDefaultValue = false)]
        public RecurrenceType? Recurrence { get; set; }

        /// <summary>
        /// Gets or Sets RuleAction
        /// </summary>
        [DataMember(Name = "ruleAction", EmitDefaultValue = false)]
        public RuleAction? RuleAction { get; set; }

        /// <summary>
        /// Gets or Sets RuleType
        /// </summary>
        [DataMember(Name = "ruleType", EmitDefaultValue = false)]
        public RuleType? RuleType { get; set; }

        /// <summary>
        /// Gets or Sets RuleStatus
        /// </summary>
        [DataMember(Name = "ruleStatus", EmitDefaultValue = false)]
        public RuleStatus? RuleStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignOptimizationRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignOptimizationRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignOptimizationRule" /> class.
        /// </summary>
        /// <param name="recurrence">recurrence.</param>
        /// <param name="ruleAction">ruleAction.</param>
        /// <param name="campaignOptimizationId">The persistent rule identifier. (required).</param>
        /// <param name="createdDate">Time of campaign optimization rule creation in ISO 8061. Read-only..</param>
        /// <param name="ruleCondition">ruleCondition.</param>
        /// <param name="ruleType">ruleType.</param>
        /// <param name="ruleName">The campaign optimization rule name..</param>
        /// <param name="campaignIds">campaignIds.</param>
        /// <param name="ruleStatus">ruleStatus.</param>
        public CampaignOptimizationRule(RecurrenceType? recurrence = default(RecurrenceType?), RuleAction? ruleAction = default(RuleAction?), string campaignOptimizationId = default(string), string createdDate = default(string), List<RuleCondition> ruleCondition = default(List<RuleCondition>), RuleType? ruleType = default(RuleType?), string ruleName = default(string), List<string> campaignIds = default(List<string>), RuleStatus? ruleStatus = default(RuleStatus?))
        {
            // to ensure "campaignOptimizationId" is required (not null)
            if (campaignOptimizationId == null)
            {
                throw new ArgumentNullException("campaignOptimizationId is a required property for CampaignOptimizationRule and cannot be null");
            }
            this.CampaignOptimizationId = campaignOptimizationId;
            this.Recurrence = recurrence;
            this.RuleAction = ruleAction;
            this.CreatedDate = createdDate;
            this.RuleCondition = ruleCondition;
            this.RuleType = ruleType;
            this.RuleName = ruleName;
            this.CampaignIds = campaignIds;
            this.RuleStatus = ruleStatus;
        }

        /// <summary>
        /// The persistent rule identifier.
        /// </summary>
        /// <value>The persistent rule identifier.</value>
        [DataMember(Name = "campaignOptimizationId", IsRequired = true, EmitDefaultValue = true)]
        public string CampaignOptimizationId { get; set; }

        /// <summary>
        /// Time of campaign optimization rule creation in ISO 8061. Read-only.
        /// </summary>
        /// <value>Time of campaign optimization rule creation in ISO 8061. Read-only.</value>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets RuleCondition
        /// </summary>
        [DataMember(Name = "ruleCondition", EmitDefaultValue = false)]
        public List<RuleCondition> RuleCondition { get; set; }

        /// <summary>
        /// The campaign optimization rule name.
        /// </summary>
        /// <value>The campaign optimization rule name.</value>
        [DataMember(Name = "ruleName", EmitDefaultValue = false)]
        public string RuleName { get; set; }

        /// <summary>
        /// Gets or Sets CampaignIds
        /// </summary>
        [DataMember(Name = "campaignIds", EmitDefaultValue = false)]
        public List<string> CampaignIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignOptimizationRule {\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  RuleAction: ").Append(RuleAction).Append("\n");
            sb.Append("  CampaignOptimizationId: ").Append(CampaignOptimizationId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  RuleCondition: ").Append(RuleCondition).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("  RuleStatus: ").Append(RuleStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignOptimizationRule);
        }

        /// <summary>
        /// Returns true if CampaignOptimizationRule instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignOptimizationRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignOptimizationRule input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Recurrence == input.Recurrence ||
                    this.Recurrence.Equals(input.Recurrence)
                ) &&
                (
                    this.RuleAction == input.RuleAction ||
                    this.RuleAction.Equals(input.RuleAction)
                ) &&
                (
                    this.CampaignOptimizationId == input.CampaignOptimizationId ||
                    (this.CampaignOptimizationId != null &&
                    this.CampaignOptimizationId.Equals(input.CampaignOptimizationId))
                ) &&
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) &&
                (
                    this.RuleCondition == input.RuleCondition ||
                    this.RuleCondition != null &&
                    input.RuleCondition != null &&
                    this.RuleCondition.SequenceEqual(input.RuleCondition)
                ) &&
                (
                    this.RuleType == input.RuleType ||
                    this.RuleType.Equals(input.RuleType)
                ) &&
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) &&
                (
                    this.CampaignIds == input.CampaignIds ||
                    this.CampaignIds != null &&
                    input.CampaignIds != null &&
                    this.CampaignIds.SequenceEqual(input.CampaignIds)
                ) &&
                (
                    this.RuleStatus == input.RuleStatus ||
                    this.RuleStatus.Equals(input.RuleStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Recurrence.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleAction.GetHashCode();
                if (this.CampaignOptimizationId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignOptimizationId.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.RuleCondition != null)
                {
                    hashCode = (hashCode * 59) + this.RuleCondition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleType.GetHashCode();
                if (this.RuleName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleName.GetHashCode();
                }
                if (this.CampaignIds != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CampaignOptimizationId (string) maxLength
            if (this.CampaignOptimizationId != null && this.CampaignOptimizationId.Length > 355)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CampaignOptimizationId, length must be less than 355.", new[] { "CampaignOptimizationId" });
            }

            // RuleName (string) maxLength
            if (this.RuleName != null && this.RuleName.Length > 355)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleName, length must be less than 355.", new[] { "RuleName" });
            }

            yield break;
        }
    }

}
