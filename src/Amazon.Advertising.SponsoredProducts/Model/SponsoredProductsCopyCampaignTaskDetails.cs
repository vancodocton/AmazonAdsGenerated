/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// SponsoredProductsCopyCampaignTaskDetails
    /// </summary>
    [DataContract(Name = "SponsoredProductsCopyCampaignTaskDetails")]
    public partial class SponsoredProductsCopyCampaignTaskDetails : IEquatable<SponsoredProductsCopyCampaignTaskDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SponsoredProductsAsyncStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SponsoredProductsCopyCampaignTaskDetails" /> class.
        /// </summary>
        /// <param name="targetMarketplaceId">The target marketplace in obfuscated format..</param>
        /// <param name="targetCampaignId">The identifier of the campaign in the target marketplace..</param>
        /// <param name="percentageCompleted">Percent of copy operation that is complete.</param>
        /// <param name="sourceMarketplaceId">The source marketplace in obfuscated format..</param>
        /// <param name="sourceCampaignId">The identifier of the campaign in the source marketplace..</param>
        /// <param name="sourceAdvertiserId">The identifier of the advertiser in source marketplace..</param>
        /// <param name="targetAdvertiserId">The identifier of the advertiser in the target marketplace..</param>
        /// <param name="status">status.</param>
        /// <param name="errorDetails">Errors that could occur during async process (up to 10).</param>
        public SponsoredProductsCopyCampaignTaskDetails(string targetMarketplaceId = default(string), string targetCampaignId = default(string), int percentageCompleted = default(int), string sourceMarketplaceId = default(string), string sourceCampaignId = default(string), string sourceAdvertiserId = default(string), string targetAdvertiserId = default(string), SponsoredProductsAsyncStatus? status = default(SponsoredProductsAsyncStatus?), List<SponsoredProductsCopyCampaignErrorDetail> errorDetails = default(List<SponsoredProductsCopyCampaignErrorDetail>))
        {
            this.TargetMarketplaceId = targetMarketplaceId;
            this.TargetCampaignId = targetCampaignId;
            this.PercentageCompleted = percentageCompleted;
            this.SourceMarketplaceId = sourceMarketplaceId;
            this.SourceCampaignId = sourceCampaignId;
            this.SourceAdvertiserId = sourceAdvertiserId;
            this.TargetAdvertiserId = targetAdvertiserId;
            this.Status = status;
            this.ErrorDetails = errorDetails;
        }

        /// <summary>
        /// The target marketplace in obfuscated format.
        /// </summary>
        /// <value>The target marketplace in obfuscated format.</value>
        [DataMember(Name = "targetMarketplaceId", EmitDefaultValue = false)]
        public string TargetMarketplaceId { get; set; }

        /// <summary>
        /// The identifier of the campaign in the target marketplace.
        /// </summary>
        /// <value>The identifier of the campaign in the target marketplace.</value>
        [DataMember(Name = "targetCampaignId", EmitDefaultValue = false)]
        public string TargetCampaignId { get; set; }

        /// <summary>
        /// Percent of copy operation that is complete
        /// </summary>
        /// <value>Percent of copy operation that is complete</value>
        [DataMember(Name = "percentageCompleted", EmitDefaultValue = false)]
        public int PercentageCompleted { get; set; }

        /// <summary>
        /// The source marketplace in obfuscated format.
        /// </summary>
        /// <value>The source marketplace in obfuscated format.</value>
        [DataMember(Name = "sourceMarketplaceId", EmitDefaultValue = false)]
        public string SourceMarketplaceId { get; set; }

        /// <summary>
        /// The identifier of the campaign in the source marketplace.
        /// </summary>
        /// <value>The identifier of the campaign in the source marketplace.</value>
        [DataMember(Name = "sourceCampaignId", EmitDefaultValue = false)]
        public string SourceCampaignId { get; set; }

        /// <summary>
        /// The identifier of the advertiser in source marketplace.
        /// </summary>
        /// <value>The identifier of the advertiser in source marketplace.</value>
        [DataMember(Name = "sourceAdvertiserId", EmitDefaultValue = false)]
        public string SourceAdvertiserId { get; set; }

        /// <summary>
        /// The identifier of the advertiser in the target marketplace.
        /// </summary>
        /// <value>The identifier of the advertiser in the target marketplace.</value>
        [DataMember(Name = "targetAdvertiserId", EmitDefaultValue = false)]
        public string TargetAdvertiserId { get; set; }

        /// <summary>
        /// Errors that could occur during async process (up to 10)
        /// </summary>
        /// <value>Errors that could occur during async process (up to 10)</value>
        [DataMember(Name = "errorDetails", EmitDefaultValue = false)]
        public List<SponsoredProductsCopyCampaignErrorDetail> ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SponsoredProductsCopyCampaignTaskDetails {\n");
            sb.Append("  TargetMarketplaceId: ").Append(TargetMarketplaceId).Append("\n");
            sb.Append("  TargetCampaignId: ").Append(TargetCampaignId).Append("\n");
            sb.Append("  PercentageCompleted: ").Append(PercentageCompleted).Append("\n");
            sb.Append("  SourceMarketplaceId: ").Append(SourceMarketplaceId).Append("\n");
            sb.Append("  SourceCampaignId: ").Append(SourceCampaignId).Append("\n");
            sb.Append("  SourceAdvertiserId: ").Append(SourceAdvertiserId).Append("\n");
            sb.Append("  TargetAdvertiserId: ").Append(TargetAdvertiserId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SponsoredProductsCopyCampaignTaskDetails);
        }

        /// <summary>
        /// Returns true if SponsoredProductsCopyCampaignTaskDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SponsoredProductsCopyCampaignTaskDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SponsoredProductsCopyCampaignTaskDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TargetMarketplaceId == input.TargetMarketplaceId ||
                    (this.TargetMarketplaceId != null &&
                    this.TargetMarketplaceId.Equals(input.TargetMarketplaceId))
                ) && 
                (
                    this.TargetCampaignId == input.TargetCampaignId ||
                    (this.TargetCampaignId != null &&
                    this.TargetCampaignId.Equals(input.TargetCampaignId))
                ) && 
                (
                    this.PercentageCompleted == input.PercentageCompleted ||
                    this.PercentageCompleted.Equals(input.PercentageCompleted)
                ) && 
                (
                    this.SourceMarketplaceId == input.SourceMarketplaceId ||
                    (this.SourceMarketplaceId != null &&
                    this.SourceMarketplaceId.Equals(input.SourceMarketplaceId))
                ) && 
                (
                    this.SourceCampaignId == input.SourceCampaignId ||
                    (this.SourceCampaignId != null &&
                    this.SourceCampaignId.Equals(input.SourceCampaignId))
                ) && 
                (
                    this.SourceAdvertiserId == input.SourceAdvertiserId ||
                    (this.SourceAdvertiserId != null &&
                    this.SourceAdvertiserId.Equals(input.SourceAdvertiserId))
                ) && 
                (
                    this.TargetAdvertiserId == input.TargetAdvertiserId ||
                    (this.TargetAdvertiserId != null &&
                    this.TargetAdvertiserId.Equals(input.TargetAdvertiserId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    this.ErrorDetails != null &&
                    input.ErrorDetails != null &&
                    this.ErrorDetails.SequenceEqual(input.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetMarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetMarketplaceId.GetHashCode();
                }
                if (this.TargetCampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetCampaignId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentageCompleted.GetHashCode();
                if (this.SourceMarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMarketplaceId.GetHashCode();
                }
                if (this.SourceCampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceCampaignId.GetHashCode();
                }
                if (this.SourceAdvertiserId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAdvertiserId.GetHashCode();
                }
                if (this.TargetAdvertiserId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetAdvertiserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ErrorDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetails.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
