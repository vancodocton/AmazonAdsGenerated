/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// SBBudgetRuleDetails
    /// </summary>
    [DataContract(Name = "SBBudgetRuleDetails")]
    public partial class SBBudgetRuleDetails : IEquatable<SBBudgetRuleDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RuleType
        /// </summary>
        [DataMember(Name = "ruleType", EmitDefaultValue = false)]
        public SBRuleType? RuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SBBudgetRuleDetails" /> class.
        /// </summary>
        /// <param name="duration">duration.</param>
        /// <param name="recurrence">recurrence.</param>
        /// <param name="ruleType">ruleType.</param>
        /// <param name="budgetIncreaseBy">budgetIncreaseBy.</param>
        /// <param name="name">The budget rule name. Required to be unique within a campaign..</param>
        /// <param name="performanceMeasureCondition">performanceMeasureCondition.</param>
        public SBBudgetRuleDetails(RuleDuration duration = default(RuleDuration), Recurrence recurrence = default(Recurrence), SBRuleType? ruleType = default(SBRuleType?), BudgetIncreaseBy budgetIncreaseBy = default(BudgetIncreaseBy), string name = default(string), PerformanceMeasureConditionForSB performanceMeasureCondition = default(PerformanceMeasureConditionForSB))
        {
            this.Duration = duration;
            this.Recurrence = recurrence;
            this.RuleType = ruleType;
            this.BudgetIncreaseBy = budgetIncreaseBy;
            this.Name = name;
            this.PerformanceMeasureCondition = performanceMeasureCondition;
        }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public RuleDuration Duration { get; set; }

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [DataMember(Name = "recurrence", EmitDefaultValue = false)]
        public Recurrence Recurrence { get; set; }

        /// <summary>
        /// Gets or Sets BudgetIncreaseBy
        /// </summary>
        [DataMember(Name = "budgetIncreaseBy", EmitDefaultValue = false)]
        public BudgetIncreaseBy BudgetIncreaseBy { get; set; }

        /// <summary>
        /// The budget rule name. Required to be unique within a campaign.
        /// </summary>
        /// <value>The budget rule name. Required to be unique within a campaign.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PerformanceMeasureCondition
        /// </summary>
        [DataMember(Name = "performanceMeasureCondition", EmitDefaultValue = false)]
        public PerformanceMeasureConditionForSB PerformanceMeasureCondition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SBBudgetRuleDetails {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  BudgetIncreaseBy: ").Append(BudgetIncreaseBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PerformanceMeasureCondition: ").Append(PerformanceMeasureCondition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SBBudgetRuleDetails);
        }

        /// <summary>
        /// Returns true if SBBudgetRuleDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SBBudgetRuleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SBBudgetRuleDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) &&
                (
                    this.Recurrence == input.Recurrence ||
                    (this.Recurrence != null &&
                    this.Recurrence.Equals(input.Recurrence))
                ) &&
                (
                    this.RuleType == input.RuleType ||
                    this.RuleType.Equals(input.RuleType)
                ) &&
                (
                    this.BudgetIncreaseBy == input.BudgetIncreaseBy ||
                    (this.BudgetIncreaseBy != null &&
                    this.BudgetIncreaseBy.Equals(input.BudgetIncreaseBy))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.PerformanceMeasureCondition == input.PerformanceMeasureCondition ||
                    (this.PerformanceMeasureCondition != null &&
                    this.PerformanceMeasureCondition.Equals(input.PerformanceMeasureCondition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                if (this.Recurrence != null)
                {
                    hashCode = (hashCode * 59) + this.Recurrence.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleType.GetHashCode();
                if (this.BudgetIncreaseBy != null)
                {
                    hashCode = (hashCode * 59) + this.BudgetIncreaseBy.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PerformanceMeasureCondition != null)
                {
                    hashCode = (hashCode * 59) + this.PerformanceMeasureCondition.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 355)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 355.", new[] { "Name" });
            }

            yield break;
        }
    }

}
