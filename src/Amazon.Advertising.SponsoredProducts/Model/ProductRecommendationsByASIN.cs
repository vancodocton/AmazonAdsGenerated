/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Product recommendations supplemented with relevant information.
    /// </summary>
    [DataContract(Name = "ProductRecommendationsByASIN")]
    public partial class ProductRecommendationsByASIN : IEquatable<ProductRecommendationsByASIN>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRecommendationsByASIN" /> class.
        /// </summary>
        /// <param name="nextCursor">An identifier to fetch next set of &#x60;ProductRecommendation&#x60; records in the result set if available. This will be null when at the end of result set..</param>
        /// <param name="previousCursor">Optional parameter that links to the previous result set served. This parameter will be null on the first request..</param>
        /// <param name="recommendations">An array of &#x60;ProductRecommendation&#x60; objects..</param>
        public ProductRecommendationsByASIN(string nextCursor = default(string), string previousCursor = default(string), List<ProductRecommendation> recommendations = default(List<ProductRecommendation>))
        {
            this.NextCursor = nextCursor;
            this.PreviousCursor = previousCursor;
            this.Recommendations = recommendations;
        }

        /// <summary>
        /// An identifier to fetch next set of &#x60;ProductRecommendation&#x60; records in the result set if available. This will be null when at the end of result set.
        /// </summary>
        /// <value>An identifier to fetch next set of &#x60;ProductRecommendation&#x60; records in the result set if available. This will be null when at the end of result set.</value>
        [DataMember(Name = "nextCursor", EmitDefaultValue = false)]
        public string NextCursor { get; set; }

        /// <summary>
        /// Optional parameter that links to the previous result set served. This parameter will be null on the first request.
        /// </summary>
        /// <value>Optional parameter that links to the previous result set served. This parameter will be null on the first request.</value>
        [DataMember(Name = "previousCursor", EmitDefaultValue = false)]
        public string PreviousCursor { get; set; }

        /// <summary>
        /// An array of &#x60;ProductRecommendation&#x60; objects.
        /// </summary>
        /// <value>An array of &#x60;ProductRecommendation&#x60; objects.</value>
        [DataMember(Name = "recommendations", EmitDefaultValue = false)]
        public List<ProductRecommendation> Recommendations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductRecommendationsByASIN {\n");
            sb.Append("  NextCursor: ").Append(NextCursor).Append("\n");
            sb.Append("  PreviousCursor: ").Append(PreviousCursor).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductRecommendationsByASIN);
        }

        /// <summary>
        /// Returns true if ProductRecommendationsByASIN instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductRecommendationsByASIN to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductRecommendationsByASIN input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.NextCursor == input.NextCursor ||
                    (this.NextCursor != null &&
                    this.NextCursor.Equals(input.NextCursor))
                ) &&
                (
                    this.PreviousCursor == input.PreviousCursor ||
                    (this.PreviousCursor != null &&
                    this.PreviousCursor.Equals(input.PreviousCursor))
                ) &&
                (
                    this.Recommendations == input.Recommendations ||
                    this.Recommendations != null &&
                    input.Recommendations != null &&
                    this.Recommendations.SequenceEqual(input.Recommendations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextCursor != null)
                {
                    hashCode = (hashCode * 59) + this.NextCursor.GetHashCode();
                }
                if (this.PreviousCursor != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousCursor.GetHashCode();
                }
                if (this.Recommendations != null)
                {
                    hashCode = (hashCode * 59) + this.Recommendations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
