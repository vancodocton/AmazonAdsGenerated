/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// CategoryItemWithAsinCounts
    /// </summary>
    [DataContract(Name = "CategoryItemWithAsinCounts")]
    public partial class CategoryItemWithAsinCounts : IEquatable<CategoryItemWithAsinCounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryItemWithAsinCounts" /> class.
        /// </summary>
        /// <param name="categoryPath">The path of the category, which contains the current category and all parent categories.</param>
        /// <param name="name">The name of the category.</param>
        /// <param name="asinCounts">asinCounts.</param>
        /// <param name="parentCategoryId">The category id of the parent node.</param>
        /// <param name="id">The category id of the current node.</param>
        public CategoryItemWithAsinCounts(string categoryPath = default(string), string name = default(string), IntegerRange asinCounts = default(IntegerRange), string parentCategoryId = default(string), string id = default(string))
        {
            this.CategoryPath = categoryPath;
            this.Name = name;
            this.AsinCounts = asinCounts;
            this.ParentCategoryId = parentCategoryId;
            this.Id = id;
        }

        /// <summary>
        /// The path of the category, which contains the current category and all parent categories
        /// </summary>
        /// <value>The path of the category, which contains the current category and all parent categories</value>
        [DataMember(Name = "categoryPath", EmitDefaultValue = false)]
        public string CategoryPath { get; set; }

        /// <summary>
        /// The name of the category
        /// </summary>
        /// <value>The name of the category</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AsinCounts
        /// </summary>
        [DataMember(Name = "asinCounts", EmitDefaultValue = false)]
        public IntegerRange AsinCounts { get; set; }

        /// <summary>
        /// The category id of the parent node
        /// </summary>
        /// <value>The category id of the parent node</value>
        [DataMember(Name = "parentCategoryId", EmitDefaultValue = false)]
        public string ParentCategoryId { get; set; }

        /// <summary>
        /// The category id of the current node
        /// </summary>
        /// <value>The category id of the current node</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryItemWithAsinCounts {\n");
            sb.Append("  CategoryPath: ").Append(CategoryPath).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AsinCounts: ").Append(AsinCounts).Append("\n");
            sb.Append("  ParentCategoryId: ").Append(ParentCategoryId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CategoryItemWithAsinCounts);
        }

        /// <summary>
        /// Returns true if CategoryItemWithAsinCounts instances are equal
        /// </summary>
        /// <param name="input">Instance of CategoryItemWithAsinCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryItemWithAsinCounts input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.CategoryPath == input.CategoryPath ||
                    (this.CategoryPath != null &&
                    this.CategoryPath.Equals(input.CategoryPath))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.AsinCounts == input.AsinCounts ||
                    (this.AsinCounts != null &&
                    this.AsinCounts.Equals(input.AsinCounts))
                ) &&
                (
                    this.ParentCategoryId == input.ParentCategoryId ||
                    (this.ParentCategoryId != null &&
                    this.ParentCategoryId.Equals(input.ParentCategoryId))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryPath != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryPath.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.AsinCounts != null)
                {
                    hashCode = (hashCode * 59) + this.AsinCounts.GetHashCode();
                }
                if (this.ParentCategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentCategoryId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
