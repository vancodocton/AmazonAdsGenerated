/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Request object to retrieve Category Recommendations based on the input ASINs.
    /// </summary>
    [DataContract(Name = "GetCategoryRecommendationsForAsinsRequest")]
    public partial class GetCategoryRecommendationsForAsinsRequest : IEquatable<GetCategoryRecommendationsForAsinsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCategoryRecommendationsForAsinsRequest" /> class.
        /// </summary>
        /// <param name="asins">List of input ASINs. This API does not check if the ASINs are valid ASINs..</param>
        /// <param name="includeAncestor">Enable this if you would like to retrieve categories which are ancestor nodes of the original recommended categories. This may increase the number of categories returned, but decrease the relevancy of those categories..</param>
        public GetCategoryRecommendationsForAsinsRequest(List<string> asins = default(List<string>), bool includeAncestor = default(bool))
        {
            this.Asins = asins;
            this.IncludeAncestor = includeAncestor;
        }

        /// <summary>
        /// List of input ASINs. This API does not check if the ASINs are valid ASINs.
        /// </summary>
        /// <value>List of input ASINs. This API does not check if the ASINs are valid ASINs.</value>
        [DataMember(Name = "asins", EmitDefaultValue = false)]
        public List<string> Asins { get; set; }

        /// <summary>
        /// Enable this if you would like to retrieve categories which are ancestor nodes of the original recommended categories. This may increase the number of categories returned, but decrease the relevancy of those categories.
        /// </summary>
        /// <value>Enable this if you would like to retrieve categories which are ancestor nodes of the original recommended categories. This may increase the number of categories returned, but decrease the relevancy of those categories.</value>
        [DataMember(Name = "includeAncestor", EmitDefaultValue = true)]
        public bool IncludeAncestor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCategoryRecommendationsForAsinsRequest {\n");
            sb.Append("  Asins: ").Append(Asins).Append("\n");
            sb.Append("  IncludeAncestor: ").Append(IncludeAncestor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCategoryRecommendationsForAsinsRequest);
        }

        /// <summary>
        /// Returns true if GetCategoryRecommendationsForAsinsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCategoryRecommendationsForAsinsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCategoryRecommendationsForAsinsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Asins == input.Asins ||
                    this.Asins != null &&
                    input.Asins != null &&
                    this.Asins.SequenceEqual(input.Asins)
                ) &&
                (
                    this.IncludeAncestor == input.IncludeAncestor ||
                    this.IncludeAncestor.Equals(input.IncludeAncestor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asins != null)
                {
                    hashCode = (hashCode * 59) + this.Asins.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeAncestor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
