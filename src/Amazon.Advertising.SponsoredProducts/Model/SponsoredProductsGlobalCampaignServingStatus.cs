/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// SponsoredProductsGlobalCampaignServingStatus
    /// </summary>
    [DataContract(Name = "SponsoredProductsGlobalCampaignServingStatus")]
    public partial class SponsoredProductsGlobalCampaignServingStatus : IEquatable<SponsoredProductsGlobalCampaignServingStatus>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CampaignServingStatus
        /// </summary>
        [DataMember(Name = "campaignServingStatus", EmitDefaultValue = false)]
        public SponsoredProductsGlobalEntityServingStatus? CampaignServingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SponsoredProductsGlobalCampaignServingStatus" /> class.
        /// </summary>
        /// <param name="statusReasons">Serving status details of campaign.</param>
        /// <param name="marketplaceCampaignServingStatus">The marketplace serving statuses..</param>
        /// <param name="campaignServingStatus">campaignServingStatus.</param>
        public SponsoredProductsGlobalCampaignServingStatus(List<SponsoredProductsGlobalCampaignServingStatusReason> statusReasons = default(List<SponsoredProductsGlobalCampaignServingStatusReason>), List<SponsoredProductsMarketplaceCampaignServingStatus> marketplaceCampaignServingStatus = default(List<SponsoredProductsMarketplaceCampaignServingStatus>), SponsoredProductsGlobalEntityServingStatus? campaignServingStatus = default(SponsoredProductsGlobalEntityServingStatus?))
        {
            this.StatusReasons = statusReasons;
            this.MarketplaceCampaignServingStatus = marketplaceCampaignServingStatus;
            this.CampaignServingStatus = campaignServingStatus;
        }

        /// <summary>
        /// Serving status details of campaign
        /// </summary>
        /// <value>Serving status details of campaign</value>
        [DataMember(Name = "statusReasons", EmitDefaultValue = false)]
        public List<SponsoredProductsGlobalCampaignServingStatusReason> StatusReasons { get; set; }

        /// <summary>
        /// The marketplace serving statuses.
        /// </summary>
        /// <value>The marketplace serving statuses.</value>
        [DataMember(Name = "marketplaceCampaignServingStatus", EmitDefaultValue = false)]
        public List<SponsoredProductsMarketplaceCampaignServingStatus> MarketplaceCampaignServingStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SponsoredProductsGlobalCampaignServingStatus {\n");
            sb.Append("  StatusReasons: ").Append(StatusReasons).Append("\n");
            sb.Append("  MarketplaceCampaignServingStatus: ").Append(MarketplaceCampaignServingStatus).Append("\n");
            sb.Append("  CampaignServingStatus: ").Append(CampaignServingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SponsoredProductsGlobalCampaignServingStatus);
        }

        /// <summary>
        /// Returns true if SponsoredProductsGlobalCampaignServingStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of SponsoredProductsGlobalCampaignServingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SponsoredProductsGlobalCampaignServingStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatusReasons == input.StatusReasons ||
                    this.StatusReasons != null &&
                    input.StatusReasons != null &&
                    this.StatusReasons.SequenceEqual(input.StatusReasons)
                ) && 
                (
                    this.MarketplaceCampaignServingStatus == input.MarketplaceCampaignServingStatus ||
                    this.MarketplaceCampaignServingStatus != null &&
                    input.MarketplaceCampaignServingStatus != null &&
                    this.MarketplaceCampaignServingStatus.SequenceEqual(input.MarketplaceCampaignServingStatus)
                ) && 
                (
                    this.CampaignServingStatus == input.CampaignServingStatus ||
                    this.CampaignServingStatus.Equals(input.CampaignServingStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusReasons != null)
                {
                    hashCode = (hashCode * 59) + this.StatusReasons.GetHashCode();
                }
                if (this.MarketplaceCampaignServingStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceCampaignServingStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CampaignServingStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
