/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Daily metrics benchmark.
    /// </summary>
    [DataContract(Name = "Daily")]
    public partial class Daily : IEquatable<Daily>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Daily" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Daily() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Daily" /> class.
        /// </summary>
        /// <param name="conversions">conversions (required).</param>
        /// <param name="clicks">clicks (required).</param>
        /// <param name="impressions">impressions (required).</param>
        public Daily(Conversions conversions = default(Conversions), Clicks clicks = default(Clicks), Impressions impressions = default(Impressions))
        {
            // to ensure "conversions" is required (not null)
            if (conversions == null)
            {
                throw new ArgumentNullException("conversions is a required property for Daily and cannot be null");
            }
            this.Conversions = conversions;
            // to ensure "clicks" is required (not null)
            if (clicks == null)
            {
                throw new ArgumentNullException("clicks is a required property for Daily and cannot be null");
            }
            this.Clicks = clicks;
            // to ensure "impressions" is required (not null)
            if (impressions == null)
            {
                throw new ArgumentNullException("impressions is a required property for Daily and cannot be null");
            }
            this.Impressions = impressions;
        }

        /// <summary>
        /// Gets or Sets Conversions
        /// </summary>
        [DataMember(Name = "conversions", IsRequired = true, EmitDefaultValue = true)]
        public Conversions Conversions { get; set; }

        /// <summary>
        /// Gets or Sets Clicks
        /// </summary>
        [DataMember(Name = "clicks", IsRequired = true, EmitDefaultValue = true)]
        public Clicks Clicks { get; set; }

        /// <summary>
        /// Gets or Sets Impressions
        /// </summary>
        [DataMember(Name = "impressions", IsRequired = true, EmitDefaultValue = true)]
        public Impressions Impressions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Daily {\n");
            sb.Append("  Conversions: ").Append(Conversions).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  Impressions: ").Append(Impressions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Daily);
        }

        /// <summary>
        /// Returns true if Daily instances are equal
        /// </summary>
        /// <param name="input">Instance of Daily to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Daily input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Conversions == input.Conversions ||
                    (this.Conversions != null &&
                    this.Conversions.Equals(input.Conversions))
                ) && 
                (
                    this.Clicks == input.Clicks ||
                    (this.Clicks != null &&
                    this.Clicks.Equals(input.Clicks))
                ) && 
                (
                    this.Impressions == input.Impressions ||
                    (this.Impressions != null &&
                    this.Impressions.Equals(input.Impressions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Conversions != null)
                {
                    hashCode = (hashCode * 59) + this.Conversions.GetHashCode();
                }
                if (this.Clicks != null)
                {
                    hashCode = (hashCode * 59) + this.Clicks.GetHashCode();
                }
                if (this.Impressions != null)
                {
                    hashCode = (hashCode * 59) + this.Impressions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
