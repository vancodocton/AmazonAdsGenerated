/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// Contains suggested recommendation for the campaign budget.
    /// </summary>
    [DataContract(Name = "BudgetRecommendation")]
    public partial class BudgetRecommendation : IEquatable<BudgetRecommendation>, IValidatableObject
    {
        /// <summary>
        /// Type of suggested action.
        /// </summary>
        /// <value>Type of suggested action.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum INCREASE for value: INCREASE
            /// </summary>
            [EnumMember(Value = "INCREASE")]
            INCREASE = 1,

            /// <summary>
            /// Enum DECREASE for value: DECREASE
            /// </summary>
            [EnumMember(Value = "DECREASE")]
            DECREASE = 2

        }


        /// <summary>
        /// Type of suggested action.
        /// </summary>
        /// <value>Type of suggested action.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetRecommendation" /> class.
        /// </summary>
        /// <param name="suggestedBudget">The suggested budget value for the campaign..</param>
        /// <param name="action">Type of suggested action..</param>
        public BudgetRecommendation(double suggestedBudget = default(double), ActionEnum? action = default(ActionEnum?))
        {
            this.SuggestedBudget = suggestedBudget;
            this.Action = action;
        }

        /// <summary>
        /// The suggested budget value for the campaign.
        /// </summary>
        /// <value>The suggested budget value for the campaign.</value>
        [DataMember(Name = "suggestedBudget", EmitDefaultValue = false)]
        public double SuggestedBudget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetRecommendation {\n");
            sb.Append("  SuggestedBudget: ").Append(SuggestedBudget).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BudgetRecommendation);
        }

        /// <summary>
        /// Returns true if BudgetRecommendation instances are equal
        /// </summary>
        /// <param name="input">Instance of BudgetRecommendation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BudgetRecommendation input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.SuggestedBudget == input.SuggestedBudget ||
                    this.SuggestedBudget.Equals(input.SuggestedBudget)
                ) &&
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SuggestedBudget.GetHashCode();
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
