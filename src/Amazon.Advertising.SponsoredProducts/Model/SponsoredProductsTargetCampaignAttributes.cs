/*
 * Sponsored Products
 *
 *  
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Amazon.Advertising.SponsoredProducts.Client.OpenAPIDateConverter;

namespace Amazon.Advertising.SponsoredProducts.Model
{
    /// <summary>
    /// SponsoredProductsTargetCampaignAttributes
    /// </summary>
    [DataContract(Name = "SponsoredProductsTargetCampaignAttributes")]
    public partial class SponsoredProductsTargetCampaignAttributes : IEquatable<SponsoredProductsTargetCampaignAttributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public SponsoredProductsCreateOrUpdateEntityState Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SponsoredProductsTargetCampaignAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SponsoredProductsTargetCampaignAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SponsoredProductsTargetCampaignAttributes" /> class.
        /// </summary>
        /// <param name="marketplaceId">The identifier of the target marketplace. (required).</param>
        /// <param name="endDate">The end date for the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6..</param>
        /// <param name="nameSuffix">The name to be appended to the campaign. If new name already exists, a number will be appended i.e. if \&quot;Campaign Name Copy\&quot; exist, we will name it \&quot;Campaign Name Copy 1\&quot; (required).</param>
        /// <param name="startDate">The start date of the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6..</param>
        /// <param name="advertiserId">The advertiser id per the targeted marketplace. Advertiser id per marketplace can fetched through /v2/profiles API. (required).</param>
        /// <param name="budget">The budget for the campaign..</param>
        /// <param name="status">status (required).</param>
        public SponsoredProductsTargetCampaignAttributes(string marketplaceId = default(string), DateTime endDate = default(DateTime), string nameSuffix = default(string), DateTime startDate = default(DateTime), string advertiserId = default(string), double budget = default(double), SponsoredProductsCreateOrUpdateEntityState status = default(SponsoredProductsCreateOrUpdateEntityState))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for SponsoredProductsTargetCampaignAttributes and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "nameSuffix" is required (not null)
            if (nameSuffix == null)
            {
                throw new ArgumentNullException("nameSuffix is a required property for SponsoredProductsTargetCampaignAttributes and cannot be null");
            }
            this.NameSuffix = nameSuffix;
            // to ensure "advertiserId" is required (not null)
            if (advertiserId == null)
            {
                throw new ArgumentNullException("advertiserId is a required property for SponsoredProductsTargetCampaignAttributes and cannot be null");
            }
            this.AdvertiserId = advertiserId;
            this.Status = status;
            this.EndDate = endDate;
            this.StartDate = startDate;
            this.Budget = budget;
        }

        /// <summary>
        /// The identifier of the target marketplace.
        /// </summary>
        /// <value>The identifier of the target marketplace.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The end date for the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6.
        /// </summary>
        /// <value>The end date for the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The name to be appended to the campaign. If new name already exists, a number will be appended i.e. if \&quot;Campaign Name Copy\&quot; exist, we will name it \&quot;Campaign Name Copy 1\&quot;
        /// </summary>
        /// <value>The name to be appended to the campaign. If new name already exists, a number will be appended i.e. if \&quot;Campaign Name Copy\&quot; exist, we will name it \&quot;Campaign Name Copy 1\&quot;</value>
        [DataMember(Name = "nameSuffix", IsRequired = true, EmitDefaultValue = true)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// The start date of the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6.
        /// </summary>
        /// <value>The start date of the campaign in formats according to https://tools.ietf.org/html/rfc3339#section-5.6.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The advertiser id per the targeted marketplace. Advertiser id per marketplace can fetched through /v2/profiles API.
        /// </summary>
        /// <value>The advertiser id per the targeted marketplace. Advertiser id per marketplace can fetched through /v2/profiles API.</value>
        [DataMember(Name = "advertiserId", IsRequired = true, EmitDefaultValue = true)]
        public string AdvertiserId { get; set; }

        /// <summary>
        /// The budget for the campaign.
        /// </summary>
        /// <value>The budget for the campaign.</value>
        [DataMember(Name = "budget", EmitDefaultValue = false)]
        public double Budget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SponsoredProductsTargetCampaignAttributes {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  NameSuffix: ").Append(NameSuffix).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  AdvertiserId: ").Append(AdvertiserId).Append("\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SponsoredProductsTargetCampaignAttributes);
        }

        /// <summary>
        /// Returns true if SponsoredProductsTargetCampaignAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SponsoredProductsTargetCampaignAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SponsoredProductsTargetCampaignAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) &&
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) &&
                (
                    this.NameSuffix == input.NameSuffix ||
                    (this.NameSuffix != null &&
                    this.NameSuffix.Equals(input.NameSuffix))
                ) &&
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) &&
                (
                    this.AdvertiserId == input.AdvertiserId ||
                    (this.AdvertiserId != null &&
                    this.AdvertiserId.Equals(input.AdvertiserId))
                ) &&
                (
                    this.Budget == input.Budget ||
                    this.Budget.Equals(input.Budget)
                ) &&
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceId.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.NameSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.NameSuffix.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.AdvertiserId != null)
                {
                    hashCode = (hashCode * 59) + this.AdvertiserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Budget.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
